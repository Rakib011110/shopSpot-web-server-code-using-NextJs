// This is your Prisma schema file for MongoDB
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String 
  needPasswordChange Boolean @default(true)
  role      UserRole
  status    UserStatus @default(ACTIVE)
  isDeleted Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  admin     Admin?
  customer  Customer?
  @@map("users")
}

model Admin {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  @@map("admins")
}

model Customer {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  contactNumber String?
  profilePhoto  String?
  address       String?
  street      String?
  city        String?
  state       String?
  zipCode     String?
  isDeleted     Boolean  @default(false)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  cart          Cart?
  orders        Order[]
  // reviews       Review[]

  @@map("customers")
}


model Product {
  id              String     @id @default(uuid()) @map("_id")
   name            String?
  description     String?
  price           Float
  category        String
  isDeleted       Boolean    @default(false)
  inventoryCount  Int
  discount        Float      @default(0)
  shopId          String

  image           String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  orderItems      OrderItem[]
  cartItems       CartItem[]
  isFlashSale     Boolean    @default(false) 
  flashSaleEndAt  DateTime?             
  @@map("products")
}



model Order {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String     @unique
  totalAmount     Float
  paymentStatus   PaymentStatus @default(PENDING)
  status          OrderStatus
  customer        Customer   @relation(fields: [customerId], references: [id])
  customerId      String
  shopId          String
  orderItems      OrderItem[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())

  @@map("orders")

}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity    Int
  price       Float
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  isDeleted   Boolean  @default(false)

  @@map("order_items")
}

model Cart {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
   customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  String      @unique
  cartItems   CartItem[]
  isDeleted   Boolean     @default(false)

  @@map("carts")
}

model CartItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity    Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  cart        Cart     @relation(fields: [cartId], references: [id])
  cartId      String
  isDeleted   Boolean  @default(false)

  @@map("cart_items")
}



enum UserRole {
  ADMIN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}
